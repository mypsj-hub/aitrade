/**
 * CIO 전략실 테이블 컴포넌트
 *
 * 목적: cio_portfolio_decisions 테이블의 모든 필드를 표시하는 종합 테이블
 *
 * 주요 기능:
 * - 탭 UI (활성, 재평가, 제외, 전체)
 * - 정렬 기능 (모든 컬럼)
 * - 코인 클릭 시 상세 패널 표시
 * - 모바일 반응형 (카드형 레이아웃)
 *
 * Props:
 * - selectedDate: Date - 조회할 날짜
 * - onCoinClick: (decision: CIODecision) => void - 코인 클릭 콜백
 *
 * 데이터 소스: cio_portfolio_decisions 테이블
 */

'use client';

import { useCIODecisions, type CIODecision } from '@/lib/hooks/useCIODecisions';
import { useState, useMemo } from 'react';
import { format } from 'date-fns';
import { ko } from 'date-fns/locale';

interface Props {
  selectedDate?: Date;
  onCoinClick?: (decision: CIODecision) => void;
}

type TabType = '전체' | '활성' | '재평가' | '제외';
type SortKey = keyof CIODecision;
type SortDirection = 'asc' | 'desc';

export function CIODecisionsTable({ selectedDate, onCoinClick }: Props) {
  const { decisions, isLoading, error } = useCIODecisions(selectedDate);
  const [sortKey, setSortKey] = useState<SortKey>('결정시각');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // 코인별 최신 결정만 추출 + 활성 상태만 필터링
  const latestDecisions = useMemo(() => {
    const decisionsMap = new Map<string, CIODecision>();

    for (const decision of decisions) {
      const existing = decisionsMap.get(decision.코인이름);

      if (!existing || decision.결정시각 > existing.결정시각) {
        decisionsMap.set(decision.코인이름, decision);
      }
    }

    // 활성 상태만 필터링
    return Array.from(decisionsMap.values()).filter((d) => {
      const status = d.관리상태?.toUpperCase();
      return status === 'ACTIVE' || status === '활성';
    });
  }, [decisions]);

  // 탭별 필터링 제거 (활성만 표시하므로 불필요)
  const filteredDecisions = latestDecisions;

  // 정렬
  const sortedDecisions = useMemo(() => {
    const sorted = [...filteredDecisions];

    sorted.sort((a, b) => {
      const aVal = a[sortKey];
      const bVal = b[sortKey];

      // null/undefined 처리
      if (aVal == null && bVal == null) return 0;
      if (aVal == null) return 1;
      if (bVal == null) return -1;

      // 숫자 비교
      if (typeof aVal === 'number' && typeof bVal === 'number') {
        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;
      }

      // 문자열 비교
      const aStr = String(aVal);
      const bStr = String(bVal);
      const comparison = aStr.localeCompare(bStr, 'ko');
      return sortDirection === 'asc' ? comparison : -comparison;
    });

    return sorted;
  }, [filteredDecisions, sortKey, sortDirection]);

  // 정렬 핸들러
  const handleSort = (key: SortKey) => {
    if (sortKey === key) {
      setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'));
    } else {
      setSortKey(key);
      setSortDirection('desc');
    }
  };

  // 로딩/에러 상태
  if (isLoading) {
    return (
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-3 text-slate-600">로딩 중...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="text-red-600 text-center py-12">
          ⚠️ 데이터 로드 실패: {error.message}
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      {/* 헤더 */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <h2 className="text-xl font-bold text-slate-800 mb-4 sm:mb-0">
          📊 CIO 의사결정 현황 (활성 코인)
        </h2>
        <div className="text-sm text-slate-500">
          총 {sortedDecisions.length}개 코인
        </div>
      </div>

      {/* 데스크톱: 테이블 뷰 */}
      <div className="hidden lg:block overflow-x-auto">
        <table className="w-full text-sm">
          <thead className="bg-slate-50 border-b-2 border-slate-200">
            <tr>
              {/* 주요 컬럼 */}
              <SortableHeader title="코인" sortKey="코인이름" currentKey={sortKey} direction={sortDirection} onSort={handleSort} />
              <SortableHeader title="결정시각" sortKey="결정시각" currentKey={sortKey} direction={sortDirection} onSort={handleSort} />
              <SortableHeader title="관리상태" sortKey="관리상태" currentKey={sortKey} direction={sortDirection} onSort={handleSort} />
              <SortableHeader title="목표비중" sortKey="목표비중" currentKey={sortKey} direction={sortDirection} onSort={handleSort} />
              <SortableHeader title="현재비중" sortKey="현재보유비중" currentKey={sortKey} direction={sortDirection} onSort={handleSort} />
              <SortableHeader title="비중변화" sortKey="비중변화량" currentKey={sortKey} direction={sortDirection} onSort={handleSort} />
            </tr>
          </thead>
          <tbody>
            {sortedDecisions.map((decision, index) => (
              <tr
                key={`${decision.코인이름}-${decision.결정시각}-${index}`}
                className="border-b border-slate-100 hover:bg-slate-50 cursor-pointer transition-colors"
                onClick={() => onCoinClick?.(decision)}
              >
                <td className="px-4 py-3 font-bold text-slate-900">{decision.코인이름}</td>
                <td className="px-4 py-3 text-slate-600">
                  {format(new Date(decision.결정시각), 'HH:mm:ss', { locale: ko })}
                </td>
                <td className="px-4 py-3">
                  <StatusBadge status={decision.관리상태} />
                </td>
                <td className="px-4 py-3 font-semibold text-blue-600">
                  {decision.목표비중?.toFixed(1)}%
                </td>
                <td className="px-4 py-3 text-slate-600">
                  {decision.현재보유비중?.toFixed(1)}%
                </td>
                <td className="px-4 py-3">
                  <WeightChange value={decision.비중변화량} />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* 모바일: 카드 뷰 */}
      <div className="lg:hidden space-y-4">
        {sortedDecisions.map((decision, index) => (
          <div
            key={`${decision.코인이름}-${decision.결정시각}-${index}`}
            className="border border-slate-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => onCoinClick?.(decision)}
          >
            {/* 카드 헤더 */}
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-bold text-slate-900">{decision.코인이름}</h3>
              <StatusBadge status={decision.관리상태} />
            </div>

            {/* 시간 */}
            <div className="text-xs text-slate-500 mb-3">
              {format(new Date(decision.결정시각), 'PPP HH:mm:ss', { locale: ko })}
            </div>

            {/* 비중 정보 */}
            <div className="grid grid-cols-2 gap-3 mb-3">
              <div>
                <div className="text-xs text-slate-500">목표 비중</div>
                <div className="text-lg font-bold text-blue-600">
                  {decision.목표비중?.toFixed(1)}%
                </div>
              </div>
              <div>
                <div className="text-xs text-slate-500">현재 비중</div>
                <div className="text-lg font-semibold text-slate-700">
                  {decision.현재보유비중?.toFixed(1)}%
                </div>
              </div>
            </div>

            {/* 추가 정보 */}
            {decision.비중변화량 != null && (
              <div className="flex items-center space-x-1 text-xs">
                <span className="text-slate-500">비중 변화:</span>
                <WeightChange value={decision.비중변화량} />
              </div>
            )}
          </div>
        ))}
      </div>

      {/* 빈 상태 */}
      {sortedDecisions.length === 0 && (
        <div className="text-center py-12 text-slate-500">
          해당 필터에 맞는 결정이 없습니다.
        </div>
      )}
    </div>
  );
}

/**
 * 정렬 가능한 테이블 헤더
 */
interface SortableHeaderProps {
  title: string;
  sortKey: SortKey;
  currentKey: SortKey;
  direction: SortDirection;
  onSort: (key: SortKey) => void;
}

function SortableHeader({ title, sortKey, currentKey, direction, onSort }: SortableHeaderProps) {
  const isActive = sortKey === currentKey;

  return (
    <th
      className="px-4 py-3 text-left font-semibold text-slate-700 cursor-pointer hover:bg-slate-100 transition-colors"
      onClick={() => onSort(sortKey)}
    >
      <div className="flex items-center space-x-1">
        <span>{title}</span>
        {isActive && (
          <span className="text-blue-600">
            {direction === 'asc' ? '▲' : '▼'}
          </span>
        )}
      </div>
    </th>
  );
}

/**
 * 관리 상태 배지
 */
function StatusBadge({ status }: { status: string }) {
  const normalized = status?.toUpperCase();

  let bgColor = 'bg-slate-100';
  let textColor = 'text-slate-700';

  if (normalized === 'ACTIVE' || normalized === '활성') {
    bgColor = 'bg-green-100';
    textColor = 'text-green-700';
  } else if (normalized === 'REVIEW' || normalized === '재평가') {
    bgColor = 'bg-yellow-100';
    textColor = 'text-yellow-700';
  } else if (normalized === 'EXCLUDED' || normalized === '제외') {
    bgColor = 'bg-red-100';
    textColor = 'text-red-700';
  }

  return (
    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${bgColor} ${textColor}`}>
      {status}
    </span>
  );
}

/**
 * 비중 변화량 표시
 */
function WeightChange({ value }: { value?: number | null }) {
  if (value == null) return <span className="text-slate-400">-</span>;

  const color = value >= 0 ? 'text-green-600' : 'text-red-600';
  const prefix = value > 0 ? '+' : '';

  return (
    <span className={`font-semibold ${color}`}>
      {prefix}
      {value.toFixed(1)}%p
    </span>
  );
}
