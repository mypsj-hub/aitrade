# 트레이딩봇 + 대시보드 전체 시스템 컨텍스트 로드

이 세션은 기존 암호화폐 자동 트레이딩 봇 시스템의 연속입니다.
**아래 9개 문서를 순서대로 읽고** 전체 시스템을 이해한 후 작업을 시작해주세요.
한글로 대답하세요.

---

## 📖 필수 학습 순서 (3-Level 문서 구조)

### Level 1: 전체 시스템 개요 (1개 문서)

1. **`README.md`** (루트 디렉토리)
   - 전체 시스템 아키텍처
   - 핵심 철학 (데이터 기반 자율 판단 시스템)
   - CIO 일관성 = 시스템 신뢰성
   - API 비용 vs 매매 정확성 우선순위

**위치**: `c:/gptbitcoin4/README.md`

**학습 체크리스트**:
- [ ] 3-Tier 아키텍처 (CIO → Process2 → Process1) 이해
- [ ] AI 트레이딩 봇의 핵심 철학 (규칙 기반 ❌, 자율 판단 ✅) 숙지
- [ ] 트레이딩봇 + 대시보드 전체 구조 파악
- [ ] 9개 핵심 문서 목록 확인

---

### Level 2: 서브시스템 총괄 가이드 (2개 문서)

#### 2-A. 트레이딩봇 시스템

2. **`docs/README.md`**
   - 트레이딩봇 개발 가이드
   - 핵심 프로세스 (Process1, Process2, CIO, AI 자동편입)
   - 데이터 소유권 규칙
   - 프롬프트 수정 6단계 필수 절차

**위치**: `c:/gptbitcoin4/docs/README.md`

**학습 체크리스트**:
- [ ] Process1 (5분 실시간 모니터링) 역할 이해
- [ ] Process2 (AI 매매 판단 워커) 역할 이해
- [ ] CIO (포트폴리오 전략 수립) 역할 이해
- [ ] 데이터 소유권 (GPT보유비중 = CIO만 수정) 숙지
- [ ] 프롬프트 수정 시 6단계 절차 필수 확인

#### 2-B. 대시보드 시스템

3. **`dashboard/README.md`**
   - Next.js 15 대시보드 개요
   - 3개 페이지 구조 (Dashboard, Analysis, Portfolio)
   - TypeScript 엄격 준수 (any 금지)
   - SWR 사용 (Supabase Realtime 사용 금지 - 비용 Zero)

**위치**: `c:/gptbitcoin4/dashboard/README.md`

**학습 체크리스트**:
- [ ] 3개 페이지 목표 이해 (3초 / 30초 / AI CIO 중심)
- [ ] TypeScript 엄격 규칙 (any 금지, Map.get() undefined 체크)
- [ ] ESLint 규칙 (prefer-const, 미사용 import 제거)
- [ ] SWR refreshInterval 정책 (5~300초)
- [ ] Props 기반 아키텍처 (Context API 최소화)

---

### Level 3: 개발자 상세 가이드 (5개 문서)

#### 3-A. 트레이딩봇 개발 규칙 및 명세서 (4개 문서)

4. **`docs/dev_guide/README.md`** ⚠️ **코드 수정 전 필수 읽기!**
   - 코드 작성 규칙
   - 모듈 구조 (ai_strategy, data_manager)
   - 데이터베이스 규칙
   - **섹션 6.0: 프롬프트 명세서 관리 규칙** (AI 일관성 문제 해결)
   - 아키텍처 변경 금지 규칙

**위치**: `c:/gptbitcoin4/docs/dev_guide/README.md`

**학습 체크리스트**:
- [ ] 코딩 규칙 (PEP 8, 타입 힌트, Docstring) 숙지
- [ ] 모듈 import 규칙 (Public API 사용) 숙지
- [ ] 데이터베이스 규칙 (필드명 일관성, 타입 통일) 숙지
- [ ] **섹션 6.0** 프롬프트 명세서 관리 규칙 **필독!**
- [ ] 아키텍처 변경 금지 (CIO 일관성 = 시스템 신뢰성) 이해

---

5. **`docs/dev_guide/AI자동편입_명세서.md`**
   - 핵심 철학: 듀얼 퍼널 시스템 (Momentum Hunter + Quality Compounder)
   - 판단 원칙 (우선순위)
   - 검증 티어: VERIFIED / PARTIAL / ALTERNATIVE
   - 시나리오 라이브러리 (10개)

**위치**: `c:/gptbitcoin4/docs/dev_guide/AI자동편입_명세서.md`

**학습 체크리스트**:
- [ ] 듀얼 퍼널 시스템 이해 (Momentum + Quality)
- [ ] 판단 우선순위 (Dual Funnel → 백테스팅 → AI 면접)
- [ ] 검증 티어 3단계 이해
- [ ] 시나리오 10개 숙지

---

6. **`docs/dev_guide/CIO비중_명세서.md`**
   - 핵심 철학: CIO 일관성 = 시스템 신뢰성
   - 판단 원칙 (MA120 → MACD/RSI → Fear & Greed → 시총/섹터)
   - AI 자동편입 존중 (VERIFIED 코인 예외적 제외만)
   - 시나리오 라이브러리 (10개)

**위치**: `c:/gptbitcoin4/docs/dev_guide/CIO비중_명세서.md`

**학습 체크리스트**:
- [ ] CIO 일관성 중요성 이해 (같은 상황 → 같은 판단)
- [ ] 판단 우선순위 (MA120 최우선)
- [ ] AI 자동편입 VERIFIED 코인 존중 규칙
- [ ] 시나리오 10개 숙지

---

7. **`docs/dev_guide/매매판단_명세서.md`**
   - 핵심 철학: CIO 목표는 "참고" (강제 아님)
   - 판단 원칙 (G/C 신호 → CIO 참고 → 과매매 방지 → 긴급도)
   - 템플릿 강제 (JSON 미준수 시 크래시 방지)
   - 시나리오 라이브러리 (10개)

**위치**: `c:/gptbitcoin4/docs/dev_guide/매매판단_명세서.md`

**학습 체크리스트**:
- [ ] CIO 목표는 "참고"임 이해 (강제 아님)
- [ ] 판단 우선순위 (G/C 신호 최우선)
- [ ] 템플릿 강제 이유 (시스템 크래시 방지)
- [ ] 시나리오 10개 숙지

---

#### 3-B. 대시보드 개발 가이드 (1개 문서)

8. **`dashboard/docs/dev_guide/배포가이드.md`**
   - 로컬 개발 환경 설정
   - Vercel 배포 가이드
   - 개발 워크플로우
   - 문제 해결 (Supabase Timestamp, 406 에러, Hydration 에러)

**위치**: `c:/gptbitcoin4/dashboard/docs/dev_guide/배포가이드.md`

**학습 체크리스트**:
- [ ] 로컬 개발 환경 설정 (npm install, .env.local)
- [ ] Vercel 자동 배포 흐름 (GitHub push → 자동 배포)
- [ ] Supabase Timestamp 쿼리 방법 (gte/lte 범위 쿼리)
- [ ] 주요 에러 해결 방법 (406, Hydration, 빌드 실패)

---

### 참고 문서 (필요 시)

9. **`docs/dev_guide/트레이딩봇_수정이력.md`**
   - 아키텍처 및 시스템 구조 변경 이력
   - 최적화 및 성능 개선 이력
   - 프로세스 개선 이력 (AI 자동편입, CIO, 긴급도)
   - 주요 기능 설명 (25개 MD 파일 → 1개 통합)

**위치**: `c:/gptbitcoin4/docs/dev_guide/트레이딩봇_수정이력.md`

**언제 보나요?**:
- 과거 개발 이력을 확인할 때
- 특정 기능의 변경 사유를 파악할 때
- 아키텍처 결정 배경을 이해할 때

---

10. **`dashboard/docs/dev_guide/변경이력.md`**
   - Phase 0-4 개발 완료 이력
   - UX 개선 이력 (모바일 최적화, 전문 용어 사용)
   - 기술 결정 사항 (Props vs Context, SWR vs Realtime)

**위치**: `c:/gptbitcoin4/dashboard/docs/dev_guide/변경이력.md`

**언제 보나요?**:
- 대시보드 과거 개발 이력을 확인할 때
- UX 개선 사유를 파악할 때
- 기술 스택 결정 배경을 이해할 때

---

## ✅ 학습 완료 후 확인사항

위 9개 문서를 모두 읽은 후 다음을 확인해주세요:

### 시스템 구조 이해
- [ ] 3-Tier 아키텍처 (CIO → Process2 → Process1) 완벽 이해
- [ ] Process1 (5분 실시간), Process2 (AI 워커), CIO (전략 수립) 역할 구분
- [ ] AI 자동편입 (듀얼 퍼널 시스템) 이해
- [ ] 대시보드 3개 페이지 목표 (3초 / 30초 / AI CIO 중심) 이해

### 핵심 철학 숙지
- [ ] **AI 트레이딩 봇 = 데이터 기반 자율 판단 시스템** (규칙 기반 ❌)
- [ ] **CIO 일관성 = 시스템 신뢰성** (같은 상황 → 같은 판단)
- [ ] **API 비용 < 매매 손실** (호출 비용보다 정확성 우선)
- [ ] **긴급도 반복 호출 = 정상 작동** (시장 민감도의 증거)

### 데이터 소유권 규칙
- [ ] **GPT보유비중** = CIO만 수정 가능 ⭐
- [ ] **GPT목표수익률** = CIO만 수정 가능 ⭐
- [ ] **GPT목표손절률** = CIO만 수정 가능 ⭐
- [ ] **GPT매매비중** = Process2만 수정 가능
- [ ] **보유수량** = Process2만 수정 가능

### 프롬프트 수정 절차
- [ ] **6단계 필수 절차** 숙지 (명세서 확인 → 수정 → 명세서 업데이트 → 검증)
- [ ] **명세서 업데이트 필수** (프롬프트만 수정하면 명세서 무용지물!)
- [ ] **3개 명세서 위치** 확인 (AI자동편입, CIO비중, 매매판단)

### 개발 규칙
- [ ] 코딩 규칙 (PEP 8, 타입 힌트, Docstring) 숙지
- [ ] 모듈 import 규칙 (Public API 사용) 숙지
- [ ] 데이터베이스 규칙 (필드명 일관성, 타입 통일) 숙지
- [ ] TypeScript 엄격 규칙 (any 금지, Map.get() undefined 체크)
- [ ] ESLint 규칙 (prefer-const, 미사용 import 제거)

### 아키텍처 변경 금지
- [ ] **CIO 일관성 우선** (같은 데이터 → 같은 판단)
- [ ] **API 호출 최소화는 최하위 우선순위** (정확성 > 비용)
- [ ] **긴급도 필터링 금지** (시장 민감도 유지)

---

## 📚 상황별 추천 문서

| 상황 | 추천 문서 |
|------|----------|
| **처음 시작** | 1 → 2 → 3 → 4 (Level 1-3 순서대로) |
| **AI 프롬프트 수정** | `docs/dev_guide/README.md#섹션-6.0` → 해당 명세서 (5, 6, 7) |
| **코드 개발** | `docs/dev_guide/README.md` (4번 문서 - 개발 규칙 총괄) |
| **대시보드 배포** | `dashboard/docs/dev_guide/배포가이드.md` (8번 문서) |
| **개발 이력 확인** | `docs/dev_guide/트레이딩봇_수정이력.md` (9번), `dashboard/docs/dev_guide/변경이력.md` (10번) |

---

## 🎯 주요 컴포넌트 파일 위치

### 트레이딩 봇 (Python 3.11+)

```
c:/gptbitcoin4/
├── main.py                  # 시스템 진입점
├── config.py                # 전역 설정
├── trade_manager.py         # 거래 실행 엔진
├── supabase_adapter.py      # DB 통합 어댑터
│
├── ai_strategy/             # AI 전략 모듈 (9파일)
│   ├── process2.py          # AI 매매 판단
│   ├── cio.py               # CIO 포트폴리오 비중
│   ├── market_analysis.py   # AI 자동편입 (Line 540~860)
│   ├── prompts.py           # Process2 프롬프트
│   └── prompts/             # CIO 프롬프트 (cio_*.txt)
│
└── data_manager/            # 데이터 관리 모듈 (9파일)
    ├── universe.py          # AI 자동편입 (Dual Funnel)
    ├── ohlcv.py             # OHLCV 데이터, 기술지표
    └── ...
```

### 웹 대시보드 (TypeScript)

```
c:/gptbitcoin4/dashboard/
├── app/                     # Next.js 15 App Router
│   ├── dashboard/page.tsx   # 시장 상황실
│   ├── analysis/page.tsx    # AI 분석실
│   └── portfolio/page.tsx   # AI CIO 전략실
│
├── components/              # React 컴포넌트 (17개)
│   ├── Navigation.tsx
│   ├── PortfolioSummaryCard.tsx
│   └── ...
│
└── lib/                     # 유틸리티 및 훅
    ├── supabase.ts          # Supabase 클라이언트
    ├── types.ts             # TypeScript 타입
    ├── store/               # Zustand 상태 관리
    └── hooks/               # 커스텀 훅
```

---

## 📝 작업 시작 전 체크리스트

### 즉시 확인 필요

1. **프로그램 실행 후 로그 확인**:
   - 환율 표시: "환율(USD/KRW): XXXX.XX KRW" (소숫점 2자리)
   - BTC 도미넌스: 정수 표시 (예: "57%")
   - 로그 정렬: "AI매매워커" 너비 확인

2. **Supabase status 테이블 확인**:
   - `btc_dominance`: 정수 저장 확인
   - `kimchi_premium`: 정수 저장 확인

3. **서킷브레이커 동작 확인**:
   - 매일 12시 자동 발동 여부 (전일 대비 계산으로 수정됨)

4. **프롬프트 자율성 확인**:
   - AI 응답에서 "규칙 X번 조항" 같은 번호 인용 제거됨
   - "무조건/절대/필수" → "권장/우선 고려" 변경됨

### 현재 시스템 설정

- `IS_DEBUG_MODE_ACTIVE = False` (운영 모드)
- AI Provider: GEMINI (Process2 긴급도), OPENAI (CIO, AI 자동편입)
- Dynamic Universe: Enabled (AI 자동편입)
- 스케줄:
  - Process1: 5분마다 (실시간 모니터링)
  - AI분석(Process2): 09:00, 21:40, 04:00
  - AI자동편입: 08:50, 21:00, 04:00
  - CIO: 09:00 (1일 1회) + 긴급도 트리거

---

## 🎯 작업 요청

[여기에 구체적인 작업 요청을 입력하세요]

**예시**:
- "매매판단 로그가 정상적으로 출력되는지 확인해줘"
- "대시보드에서 포트폴리오 차트가 제대로 표시되는지 확인해줘"
- "새로운 기능을 추가하고 싶어: [기능 설명]"
- "AI 프롬프트를 수정하고 싶어: [어떤 프롬프트를 어떻게]"
- "프로그램 실행 중 에러가 발생했어: [에러 메시지]"

---

## 🔗 관련 링크

### 배포 및 인프라

- **Live Dashboard**: https://aitrade-liard.vercel.app
- **GitHub Repository**: https://github.com/mypsj-hub/aitrade
- **Vercel 대시보드**: https://vercel.com/dashboard
- **Supabase**: https://nlkbkyambjnlmuplpnrd.supabase.co

### API 문서

- [Upbit API](https://docs.upbit.com/)
- [OpenAI API](https://platform.openai.com/docs/)
- [Google Gemini API](https://ai.google.dev/docs)
- [Supabase API](https://supabase.com/docs)

---

**📅 최종 업데이트**: 2025-10-24
**📦 버전**: v3.0 (3-Level 문서 구조)
**📝 문서 개수**: 9개 (Level 1: 1개, Level 2: 2개, Level 3: 5개, 참고: 2개)
